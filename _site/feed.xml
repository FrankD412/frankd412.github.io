<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="https://frankd412.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://frankd412.github.io/" rel="alternate" type="text/html" /><updated>2020-01-17T22:03:49-08:00</updated><id>https://frankd412.github.io/feed.xml</id><title type="html">Francesco Di Natale</title><subtitle>Software Engineer. Computer Scientist. Idealist.</subtitle><entry><title type="html">The Basics of Kerbal</title><link href="https://frankd412.github.io/posts/gaming/kerbal-basics/" rel="alternate" type="text/html" title="The Basics of Kerbal" /><published>2019-09-02T10:33:00-07:00</published><updated>2019-09-02T10:33:00-07:00</updated><id>https://frankd412.github.io/posts/gaming/kerbal-basics</id><content type="html" xml:base="https://frankd412.github.io/posts/gaming/kerbal-basics/">&lt;h1 id=&quot;about-kerbal-space-program&quot;&gt;About Kerbal Space Program&lt;/h1&gt;

&lt;p&gt;This is a stub.&lt;/p&gt;

&lt;h1 id=&quot;mods&quot;&gt;Mods&lt;/h1&gt;

&lt;h2 id=&quot;ckan-mod-manager&quot;&gt;CKAN Mod Manager&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Point to CKAN install&lt;/li&gt;
  &lt;li&gt;Sadly, only works on Windows.
    &lt;ul&gt;
      &lt;li&gt;Put in install folder, so that way if you migrate libraries it will follow.&lt;/li&gt;
      &lt;li&gt;pin it to taskbar&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="gaming" /><category term="blog" /><category term="kerbal space program" /><category term="science" /><category term="space" /><category term="gaming" /><category term="physics" /><summary type="html">A post about the basics for getting started with Kerbal Space Program. Mods, some basics to look into, etc.</summary></entry><entry><title type="html">How to Setup Statically Built GitHub Pages</title><link href="https://frankd412.github.io/posts/static-sites/" rel="alternate" type="text/html" title="How to Setup Statically Built GitHub Pages" /><published>2019-07-01T00:00:00-07:00</published><updated>2019-07-01T00:00:00-07:00</updated><id>https://frankd412.github.io/posts/static-sites</id><content type="html" xml:base="https://frankd412.github.io/posts/static-sites/">&lt;p&gt;So, this how-to is mostly just an impromptu post so that it’s documented for anyone else struggling to get a statically built Jekyll webpage running on their own person github.io site. My woes all started when trying to get the &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll-scholar&lt;/code&gt; gem working on my personal webpage (this very one that you’re on in fact). In this post, I’ll take you through some of the basic things that I have set up having gone down this rabbit hole and investigated a few dead ends with a moderate amount of Google searching.&lt;/p&gt;

&lt;p&gt;As it turns out, there is actually quite a set of gems that GitHub doesn’t trust which makes it harder to do anything fancy if it requires an install they don’t like. In my debugging efforts I was spammed with emails as I kept pushing commits trying to fix the error. I swear that it’s come across my inbox enough that it’ll give me nightmares for a while. For those curious, the error in question:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The tag `bibliography` on line 26 in `projects/_posts/2019-05-09-maestro-workflow-conductor.md` is not a recognized Liquid tag.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;set-up-local-building-and-deploying&quot;&gt;Set up local building and deploying&lt;/h2&gt;
&lt;p&gt;Setting up local deployment is going to be the first step to getting this all to work, but it’s also beneficial because it means you can test your website without having to constantly commit to your repository and wait for GitHub to build your webpage for you. Taking the commits out of the loop really speeds up your ability to try new things, catch errors ahead of time, and makes the whole website development thing less clumsy. And let’s be honest: it saves you the embarrassment of having deployed a broken website, because once that’s on the internet it’s there forever.&lt;/p&gt;

&lt;aside class=&quot;notice&quot;&gt;
Note: I will caveat this section with the fact that I've only ever gotten this to work in a Unix environment. I develop on a MacBook, but see no reason why these steps shouldn't work on a Linux VM. That said, I did attempt to get a Docker container for building and local testing running and found it miserably difficult to do so, which means this guide won't work on Windows. I'll be sure to make another blog post if I manage to figure that one out.
&lt;/aside&gt;

&lt;p&gt;So, what do you need to do to get set up? First things first, you’re going to need to install &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby&lt;/code&gt;. For me, that was as simple as &lt;code class=&quot;highlighter-rouge&quot;&gt;brew install ruby&lt;/code&gt; and a simple .zshrc file update. If you’re on any modern distro of Linux/Unix (or even an older one), you can most likely run &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get install ruby&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install ruby&lt;/code&gt;. With that installation you will now have access to &lt;code class=&quot;highlighter-rouge&quot;&gt;gems&lt;/code&gt;, which is really what we want out of all of this (don’t worry, you won’t be coding in ruby). Once that’s done, you’ll want to run the following commands. The output should look similar to the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; gem install bundler
&amp;gt; bundle update --bundler
Fetching bundler-2.0.1.gem
bundler's executable &quot;bundle&quot; conflicts with /usr/local/lib/ruby/gems/2.6.0/bin/bundle
Overwrite the executable? [yN]  y
bundler's executable &quot;bundler&quot; conflicts with /usr/local/lib/ruby/gems/2.6.0/bin/bundler
Overwrite the executable? [yN]  y
Successfully installed bundler-2.0.1
Parsing documentation for bundler-2.0.1
Installing ri documentation for bundler-2.0.1
Done installing documentation for bundler after 2 seconds
1 gem installed
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Once &lt;code class=&quot;highlighter-rouge&quot;&gt;bundler&lt;/code&gt; is installed, run &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle update --bundler&lt;/code&gt;. You should see a bunch of dependencies installed one after another over a few minutes.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; bundle update --bundler
Fetching gem metadata from https://rubygems.org/..............
Fetching concurrent-ruby 1.1.5
Installing concurrent-ruby 1.1.5
Fetching i18n 0.9.5
Installing i18n 0.9.5
Using minitest 5.11.3
Fetching thread_safe 0.3.6
…
Installing jekyll-scholar 5.14.1
Fetching jekyll-sitemap 1.3.1
Installing jekyll-sitemap 1.3.1
Bundle updated!
Post-install message from html-pipeline:
-------------------------------------------------
Thank you for installing html-pipeline!
You must bundle Filter gem dependencies.
See html-pipeline README.md for more details.
https://github.com/jch/html-pipeline#dependencies
-------------------------------------------------
Post-install message from sass:

Ruby Sass has reached end-of-life and should no longer be used.

* If you use Sass as a command-line tool, we recommend using Dart Sass, the new
  primary implementation: https://sass-lang.com/install

* If you use Sass as a plug-in for a Ruby web framework, we recommend using the
  sassc gem: https://github.com/sass/sassc-ruby#readme

* For more details, please refer to the Sass blog:
  https://sass-lang.com/blog/posts/7828841
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;starting-your-local-jekyll-server&quot;&gt;Starting your local Jekyll server&lt;/h2&gt;
&lt;p&gt;It looks like Ruby Sass is EOL’ed, but it does work for now and renders the site just fine. Now that you have &lt;code class=&quot;highlighter-rouge&quot;&gt;bundler&lt;/code&gt; installed, let’s start a local server. Starting a local server is as simple as the following, just change directory into the root of your website and run the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; bundle exec jekyll serve --incremental
Configuration file: /Users/frank/Documents/Code/Website/frankd412.github.io/_config.yml
            Source: /Users/frank/Documents/Code/Website/frankd412.github.io
       Destination: /Users/frank/Documents/Code/Website/frankd412.github.io/_site
 Incremental build: enabled
      Generating...
       Jekyll Feed: Generating feed for posts
                    done in 1.708 seconds.
 Auto-regeneration: enabled for '/Users/frank/Documents/Code/Website/frankd412.github.io'
    Server address: http://127.0.0.1:4000
  Server running... press ctrl-c to stop.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;--incremental&lt;/code&gt; flag continues to monitor changes to the repository, rebuilding the repository on the fly as you change files. You can also build the website without serving it locally by running &lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll build&lt;/code&gt;. Adding new pages or posts usually requires a rebuild, which &lt;code class=&quot;highlighter-rouge&quot;&gt;serve&lt;/code&gt; does not handle.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;deploying-your-github-page-statically&quot;&gt;Deploying your GitHub Page Statically&lt;/h2&gt;

&lt;p&gt;Alright, so now you know how to both serve and build your site locally. Most of the way there! So, now you want to deploy your static website. If you’re using a github.io site (as I am), you’re already familiar with the fact that the master branch is the &lt;em&gt;only&lt;/em&gt; branch that gets deployed. That functionality seems to be baked into GitHub’s deployment, with no way to change it. Okay, cool. So that means we have to reserve master for our built site. If you’ve already got a repository start, you simply just make a new branch based on your current master (otherwise, just start a new branch from the start). I called mine “src”, as it’s the source to my site. Otherwise, make sure to change the default branch to src on GitHub.&lt;/p&gt;

&lt;p&gt;Now, if you have a &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file in your repository, make sure that the build directory is not in it. You’re going to want to check that folder in, so to make life easier just don’t ignore it. Otherwise, we’re going to treat master as a subtree so that we simply push our site contents to it. So now, in order to deploy, simply run the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; git checkout src
Switched to branch 'src'
Your branch is up to date with 'origin/src'.
&amp;gt; bundle exec jekyll build
Configuration file: /Users/frank/Documents/Code/Website/frankd412.github.io/_config.yml
            Source: /Users/frank/Documents/Code/Website/frankd412.github.io
       Destination: /Users/frank/Documents/Code/Website/frankd412.github.io/_site
 Incremental build: disabled. Enable with --incremental
      Generating...
       Jekyll Feed: Generating feed for posts
                    done in 1.715 seconds.
 Auto-regeneration: disabled. Use --watch to enable.
 &amp;gt; git subtree push --prefix _site origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;aside class=&quot;notice&quot;&gt;
The folder `_site` above is where my build places my compiled website. Your website may be configured differently, so make sure to correct the name of the folder for your own naming.
&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;IMPORTANT&lt;/strong&gt;: You MUST rebuild your site using `bundle exec jekyll build` and commit the compiled site folder to your src branch. If you've been testing locally, rebuilding gets rid of any `localhost` references in the statically compiled pages. You must also commit for git to be able to refer to the node in the `src` branch when mapping a subtree.
&lt;/aside&gt;

&lt;p&gt;And that should do it. You now commit code to the src branch and push a subtree to master when you’re ready to publish. It’s as simple as that.
&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/troubleshooting/&quot;&gt;Jekyll Troubleshooting&lt;/a&gt;&lt;br /&gt;
&lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;&lt;/p&gt;</content><author><name></name></author><category term="web dev" /><category term="how-to" /><category term="technical" /><category term="jekyll" /><category term="blog" /><summary type="html">After struggling with trying to figure out static builds with various guides, I found out just how simple it was to release a staticly built jekyll site. Here's a how to on how to do it with your own personal github.io webpage.</summary></entry><entry><title type="html">Maestro Workflow Conductor (maestrowf)</title><link href="https://frankd412.github.io/projects/maestro-workflow-conductor/" rel="alternate" type="text/html" title="Maestro Workflow Conductor (maestrowf)" /><published>2019-05-11T00:00:00-07:00</published><updated>2019-05-11T00:00:00-07:00</updated><id>https://frankd412.github.io/projects/maestro-workflow-conductor</id><content type="html" xml:base="https://frankd412.github.io/projects/maestro-workflow-conductor/">&lt;p style=&quot;text-align: center;&quot;&gt;
&lt;!-- Place this tag where you want the button to render. --&gt;
&lt;a class=&quot;github-button&quot; href=&quot;https://github.com/LLNL/maestrowf&quot; data-size=&quot;large&quot; data-show-count=&quot;true&quot; aria-label=&quot;Star LLNL/maestrowf on GitHub&quot;&gt;Star&lt;/a&gt;
&lt;!-- Place this tag where you want the button to render. --&gt;
&lt;a class=&quot;github-button&quot; href=&quot;https://github.com/LLNL/maestrowf/subscription&quot; data-size=&quot;large&quot; data-show-count=&quot;true&quot; aria-label=&quot;Watch LLNL/maestrowf on GitHub&quot;&gt;Watch&lt;/a&gt;
&lt;!-- Place this tag where you want the button to render. --&gt;
&lt;a class=&quot;github-button&quot; href=&quot;https://github.com/LLNL/maestrowf/issues&quot; data-size=&quot;large&quot; data-show-count=&quot;true&quot; aria-label=&quot;Issue LLNL/maestrowf on GitHub&quot;&gt;Issue&lt;/a&gt;
&lt;!-- Place this tag where you want the button to render. --&gt;
&lt;a class=&quot;github-button&quot; href=&quot;https://github.com/LLNL/maestrowf/fork&quot; data-size=&quot;large&quot; data-show-count=&quot;true&quot; aria-label=&quot;Fork LLNL/maestrowf on GitHub&quot;&gt;Fork&lt;/a&gt;
&lt;/p&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;

&lt;h3 id=&quot;what-is-maestro&quot;&gt;What is Maestro?&lt;/h3&gt;
&lt;p&gt;Maestro is a Python library and command line tool for automating and monitoring software workflows that I authored at &lt;a href=&quot;https://software.llnl.gov/repo/#/LLNL/maestrowf&quot;&gt;LLNL&lt;/a&gt;. The main concept centers around conducting “studies” using independent workflow steps that are chained together by user specified execution-order dependency. A study is defined in a YAML file that Maestro denotes as a “study specification”. A specification can be user written or programmatically generated. Maestro parses the a study specification, generating standard data structures for setting up, executing, and monitoring a study.&lt;/p&gt;

&lt;h3 id=&quot;why-did-you-create-maestro&quot;&gt;Why did you create Maestro?&lt;/h3&gt;
&lt;p&gt;I created Maestro because of my experiences running simulation workflows and the general trend of ignoring automation. In my experience, automation and infrastructure are often viewed as efforts that are lesser priority to accomplishing critical path milestones. In response, I wanted to design a lightweight tool that could be used to quickly stand up automated software workflows but that also accomplished a few other important properties:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;encourage users to think about workflows as standalone steps with intent and purpose.&lt;/li&gt;
  &lt;li&gt;encourage users to better document their workflows.&lt;/li&gt;
  &lt;li&gt;make user workflows easier to share and communicate.&lt;/li&gt;
  &lt;li&gt;make workflows easier to parameterize and manage.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;what-features-does-maestro-have&quot;&gt;What features does Maestro have?&lt;/h3&gt;
&lt;p&gt;Maestro has a large set of features that help to make running software workflows easier:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Workspace set up and management.
    &lt;ul&gt;
      &lt;li&gt;Initial workspace set up and basic study metadata generation.&lt;/li&gt;
      &lt;li&gt;Automatic study workspace timestamping.&lt;/li&gt;
      &lt;li&gt;Automatic step workspace generation before execution.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;what-does-a-study-specification-look-like&quot;&gt;What does a study specification look like?&lt;/h3&gt;
&lt;p&gt;A basic single step “hello world” example looks as follows:&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello_world&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;A simple 'Hello World' study.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;OUTPUT_PATH&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./sample_output/hello_world&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;study&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello_world&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Say hello to the world!&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;echo &quot;Hello, World!&quot; &amp;gt; hello_world.txt&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can easily chain steps together by specifying dependencies. If you wanted to say “bye” after saying “hello”:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello_bye&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;A simple 'Hello World' study.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;OUTPUT_PATH&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./sample_output/hello_world&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;OUT_FORMAT&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$(GREETING)_$(NAME).txt&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;study&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hello_world&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Say hello to someone!&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;echo &quot;Hello, World!&quot; &amp;gt; hello_world.txt&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bye_world&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Say bye to someone!&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;echo &quot;Bye, World!&quot; &amp;gt; bye_world.txt&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;depends&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;hello_world&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;core-design-principles&quot;&gt;Core Design Principles&lt;/h2&gt;

&lt;p&gt;When performing scientific software workflows, there are a few desirable properties that are essential to consider. Maestro focuses on the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Repeatability&lt;/strong&gt;. Consistently repeating a workflow is the first step to reproducing it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Extendibility&lt;/strong&gt;. Workflows should be modular, allowing workflows to be extensible, testable, and robust.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Documentation&lt;/strong&gt;. Good documentation provides an opportunity for the user to step back and explain to themselves what they’re doing.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Shareability&lt;/strong&gt;. A workflow should be easy given to other users with minimal coupling to any one user’s environment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;citations&quot;&gt;Citations&lt;/h2&gt;

&lt;ul class=&quot;bibliography&quot;&gt;&lt;li&gt;&lt;span id=&quot;DiNatale2019MPI32955003356197&quot;&gt;Di Natale, F., Bhatia, H., Carpenter, T. S., Neale, C., Schumacher, S. K., Oppelstrup, T., … Ingólfsson, H. I. (2019). A Massively Parallel Infrastructure for Adaptive Multiscale Simulations: Modeling RAS Initiation Pathway for Cancer. In &lt;i&gt;Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis&lt;/i&gt; (pp. 57:1–57:16). New York, NY, USA: ACM. https://doi.org/10.1145/3295500.3356197&lt;/span&gt;

&lt;div id=&quot;DiNatale2019MPI32955003356197-materials&quot;&gt;
    
        &lt;a class=&quot;label&quot;&gt;
            &lt;input class=&quot;bibliography label notes&quot; type=&quot;button&quot; value=&quot;Won Best Paper&quot; /&gt;
        &lt;/a&gt;
    

    
        &lt;a class=&quot;label collapsible&quot;&gt;
            &lt;input id=&quot;DiNatale2019MPI32955003356197&quot; class=&quot;bibliography label abstract&quot; type=&quot;button&quot; value=&quot;abstract&quot; /&gt;
        &lt;/a&gt;
    

    
        &lt;a class=&quot;label&quot; target=&quot;_blank&quot; href=&quot;https://dl.acm.org/doi/pdf/10.1145/3295500.3356197?download=true&quot;&gt;
            
                &lt;input class=&quot;bibliography label download&quot; type=&quot;button&quot; value=&quot;download&quot; /&gt;
            
        &lt;/a&gt;
    

    
        &lt;a class=&quot;label&quot; target=&quot;_blank&quot; href=&quot;http://dx.doi.org/10.1145/3295500.3356197&quot;&gt;
            &lt;input class=&quot;bibliography label doi&quot; type=&quot;button&quot; value=&quot;doi&quot; /&gt;
        &lt;/a&gt;
    

    &lt;a class=&quot;label collapsible&quot;&gt;
        &lt;input id=&quot;DiNatale2019MPI32955003356197&quot; class=&quot;bibliography label bibtex&quot; type=&quot;button&quot; value=&quot;bibtex&quot; /&gt;
    &lt;/a&gt;

    
        &lt;div id=&quot;DiNatale2019MPI32955003356197-abstract&quot; class=&quot;collapsible&quot;&gt;
            &lt;pre style=&quot;white-space:normal;&quot;&gt;Computational models can define the functional dynamics of complex systems in exceptional detail. However, many modeling studies face seemingly incommensurate requirements: to gain meaningful insights into some phenomena requires models with high resolution (microscopic) detail that must nevertheless evolve over large (macroscopic) length- and time-scales. Multiscale modeling has become increasingly important to bridge this gap. Executing complex multiscale models on current petascale computers with high levels of parallelism and heterogeneous architectures is challenging. Many distinct types of resources need to be simultaneously managed, such as GPUs and CPUs, memory size and latencies, communication bottlenecks, and filesystem bandwidth. In addition, robustness to failure of compute nodes, network, and filesystems is critical.

We introduce a first-of-its-kind, massively parallel Multiscale Machine-Learned Modeling Infrastructure (MuMMI), which couples a macro scale model spanning micrometer length- and millisecond time-scales with a micro scale model employing high-fidelity molecular dynamics (MD) simulations. MuMMI is a cohesive and transferable infrastructure designed for scalability and efficient execution on heterogeneous resources. A central workflow manager simultaneously allocates GPUs and CPUs while robustly handling failures in compute nodes, communication networks, and filesystems. A hierarchical scheduler controls GPU-accelerated MD simulations and in situ analysis.

We present the various MuMMI components, including the macro model, GPU-accelerated MD, in situ analysis of MD data, machine learning selection module, a highly scalable hierarchical scheduler, and detail the central workflow manager that ties these modules together. In addition, we present performance data from our runs on Sierra, in which we validated MuMMI by investigating an experimentally intractable biological system: the dynamic interaction between RAS proteins and a plasma membrane. We used up to 4000 nodes of the Sierra supercomputer, concurrently utilizing over 16,000 GPUs and 176,000 CPU cores, and running up to 36,000 different tasks. This multiscale simulation includes about 120,000 MD simulations aggregating over 200 milliseconds, which is orders of magnitude greater than comparable studies.&lt;/pre&gt;
        &lt;/div&gt;
    
    &lt;div id=&quot;DiNatale2019MPI32955003356197-bibtex&quot; class=&quot;collapsible&quot;&gt;
        &lt;pre&gt;@inproceedings{DiNatale2019MPI32955003356197,
  author = {Di Natale, Francesco and Bhatia, Harsh and Carpenter, Timothy S. and Neale, Chris and Schumacher, Sara Kokkila and Oppelstrup, Tomas and Stanton, Liam and Zhang, Xiaohua and Sundram, Shiv and Scogland, Thomas R. W. and Dharuman, Gautham and Surh, Michael P. and Yang, Yue and Misale, Claudia and Schneidenbach, Lars and Costa, Carlos and Kim, Changhoan and D'Amora, Bruce and Gnanakaran, Sandrasegaram and Nissley, Dwight V. and Streitz, Fred and Lightstone, Felice C. and Bremer, Peer-Timo and Glosli, James N. and Ing\'{o}lfsson, Helgi I.},
  title = {A Massively Parallel Infrastructure for Adaptive Multiscale Simulations: Modeling RAS Initiation Pathway for Cancer},
  booktitle = {Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis},
  series = {SC '19},
  year = {2019},
  month = nov,
  isbn = {978-1-4503-6229-0},
  location = {Denver, Colorado},
  pages = {57:1--57:16},
  articleno = {57},
  numpages = {16},
  url = {http://doi.acm.org/10.1145/3295500.3356197},
  link = {https://dl.acm.org/doi/pdf/10.1145/3295500.3356197?download=true},
  doi = {10.1145/3295500.3356197},
  acmid = {3356197},
  publisher = {ACM},
  address = {New York, NY, USA},
  keywords = {adaptive simulations, cancer research, heterogenous architecture, machine learning, massively parallel, multiscale simulations},
  notes = {Won Best Paper}
}
&lt;/pre&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;8943552&quot;&gt;Patki, T., Frye, Z., Bhatia, H., Di Natale, F., Glosli, J., Ingolfsson, H., &amp;amp; Rountree, B. (2019). Comparing GPU Power and Frequency Capping: A Case Study with the MuMMI Workflow. In &lt;i&gt;2019 IEEE/ACM Workflows in Support of Large-Scale Science (WORKS)&lt;/i&gt; (pp. 31–39). https://doi.org/10.1109/WORKS49585.2019.00009&lt;/span&gt;

&lt;div id=&quot;8943552-materials&quot;&gt;
    

    
        &lt;a class=&quot;label collapsible&quot;&gt;
            &lt;input id=&quot;8943552&quot; class=&quot;bibliography label abstract&quot; type=&quot;button&quot; value=&quot;abstract&quot; /&gt;
        &lt;/a&gt;
    

    

    
        &lt;a class=&quot;label&quot; target=&quot;_blank&quot; href=&quot;http://dx.doi.org/10.1109/WORKS49585.2019.00009&quot;&gt;
            &lt;input class=&quot;bibliography label doi&quot; type=&quot;button&quot; value=&quot;doi&quot; /&gt;
        &lt;/a&gt;
    

    &lt;a class=&quot;label collapsible&quot;&gt;
        &lt;input id=&quot;8943552&quot; class=&quot;bibliography label bibtex&quot; type=&quot;button&quot; value=&quot;bibtex&quot; /&gt;
    &lt;/a&gt;

    
        &lt;div id=&quot;8943552-abstract&quot; class=&quot;collapsible&quot;&gt;
            &lt;pre style=&quot;white-space:normal;&quot;&gt;Accomplishing the goal of exascale computing under a potential power limit requires HPC clusters to maximize both parallel efficiency and power efficiency. As modern HPC systems embark on a trend toward extreme heterogeneity leveraging multiple GPUs per node, power management becomes even more challenging, especially when catering to scientific workflows with co-scheduled components. The impact of managing GPU power on workflow performance and run-to-run reproducibility has not been adequately studied. In this paper, we present a first-of-its-kind research to study the impact of the two power management knobs that are available on NVIDIA Volta GPUs: frequency capping and power capping. We analyzed performance and power metrics of GPU’s on a top-10 supercomputer by tuning these knobs for more than 5,300 runs in a scientific workflow. Our data found that GPU power capping in a scientific workflow is an effective way of improving power efficiency while preserving performance, while GPU frequency capping is a demonstrably unpredictable way of reducing power consumption. Additionally, we identified that frequency capping results in higher variation and anomalous behavior on GPUs, which is counterintuitive to what has been observed in the research conducted on CPUs.&lt;/pre&gt;
        &lt;/div&gt;
    
    &lt;div id=&quot;8943552-bibtex&quot; class=&quot;collapsible&quot;&gt;
        &lt;pre&gt;@inproceedings{8943552,
  author = {{Patki}, T. and {Frye}, Z. and {Bhatia}, H. and {Di Natale}, F. and {Glosli}, J. and {Ingolfsson}, H. and {Rountree}, B.},
  booktitle = {2019 IEEE/ACM Workflows in Support of Large-Scale Science (WORKS)},
  title = {Comparing GPU Power and Frequency Capping: A Case Study with the MuMMI Workflow},
  year = {2019},
  volume = {},
  number = {},
  pages = {31-39},
  keywords = {Workflows; Cancer MuMMI; GPU power capping; GPU frequency capping; Performance; Variation},
  doi = {10.1109/WORKS49585.2019.00009},
  issn = {null},
  month = nov
}
&lt;/pre&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;peterson2019merlin&quot;&gt;Peterson, J. L., Anirudh, R., Athey, K., Bay, B., Bremer, P.-T., Castillo, V., … Yeom, J.-S. (2019). Merlin: Enabling Machine Learning-Ready HPC Ensembles.&lt;/span&gt;

&lt;div id=&quot;peterson2019merlin-materials&quot;&gt;
    

    

    

    

    &lt;a class=&quot;label collapsible&quot;&gt;
        &lt;input id=&quot;peterson2019merlin&quot; class=&quot;bibliography label bibtex&quot; type=&quot;button&quot; value=&quot;bibtex&quot; /&gt;
    &lt;/a&gt;

    
    &lt;div id=&quot;peterson2019merlin-bibtex&quot; class=&quot;collapsible&quot;&gt;
        &lt;pre&gt;@misc{peterson2019merlin,
  title = {Merlin: Enabling Machine Learning-Ready HPC Ensembles},
  author = {Peterson, J. Luc and Anirudh, Rushil and Athey, Kevin and Bay, Benjamin and Bremer, Peer-Timo and Castillo, Vic and Natale, Francesco Di and Fox, David and Gaffney, Jim A. and Hysom, David and Jacobs, Sam Ade and Kailkhura, Bhavya and Koning, Joe and Kustowski, Bogdan and Langer, Steven and Robinson, Peter and Semler, Jessica and Spears, Brian and Thiagarajan, Jayaraman and Essen, Brian Van and Yeom, Jae-Seung},
  year = {2019},
  eprint = {1912.02892},
  archiveprefix = {arXiv},
  primaryclass = {cs.DC}
}
&lt;/pre&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;ahn2018flux&quot;&gt;Ahn, D. H., Bass, N., Chu, A., Garlick, J., Grondona, M., Herbein, S., … others. (2018). Flux: Overcoming Scheduling Challenges for Exascale Workflows. In &lt;i&gt;2018 IEEE/ACM Workflows in Support of Large-Scale Science (WORKS)&lt;/i&gt; (pp. 10–19). IEEE.&lt;/span&gt;

&lt;div id=&quot;ahn2018flux-materials&quot;&gt;
    

    

    

    

    &lt;a class=&quot;label collapsible&quot;&gt;
        &lt;input id=&quot;ahn2018flux&quot; class=&quot;bibliography label bibtex&quot; type=&quot;button&quot; value=&quot;bibtex&quot; /&gt;
    &lt;/a&gt;

    
    &lt;div id=&quot;ahn2018flux-bibtex&quot; class=&quot;collapsible&quot;&gt;
        &lt;pre&gt;@inproceedings{ahn2018flux,
  title = {Flux: Overcoming Scheduling Challenges for Exascale Workflows},
  author = {Ahn, Dong H and Bass, Ned and Chu, Albert and Garlick, Jim and Grondona, Mark and Herbein, Stephen and Koning, Joseph and Patki, Tapasya and Scogland, Thomas RW and Springmeyer, Becky and others},
  booktitle = {2018 IEEE/ACM Workflows in Support of Large-Scale Science (WORKS)},
  pages = {10--19},
  year = {2018},
  organization = {IEEE}
}
&lt;/pre&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;&lt;span id=&quot;doi101021acsjctc8b00496&quot;&gt;Carpenter, T. S., López, C. A., Neale, C., Montour, C., Ingólfsson, H. I., Di Natale, F., … Gnanakaran, S. (2018). Capturing Phase Behavior of Ternary Lipid Mixtures with a Refined Martini Coarse-Grained Force Field. &lt;i&gt;Journal of Chemical Theory and Computation&lt;/i&gt;, &lt;i&gt;14&lt;/i&gt;(11), 6050–6062. https://doi.org/10.1021/acs.jctc.8b00496&lt;/span&gt;

&lt;div id=&quot;doi101021acsjctc8b00496-materials&quot;&gt;
    

    

    

    
        &lt;a class=&quot;label&quot; target=&quot;_blank&quot; href=&quot;http://dx.doi.org/10.1021/acs.jctc.8b00496&quot;&gt;
            &lt;input class=&quot;bibliography label doi&quot; type=&quot;button&quot; value=&quot;doi&quot; /&gt;
        &lt;/a&gt;
    

    &lt;a class=&quot;label collapsible&quot;&gt;
        &lt;input id=&quot;doi101021acsjctc8b00496&quot; class=&quot;bibliography label bibtex&quot; type=&quot;button&quot; value=&quot;bibtex&quot; /&gt;
    &lt;/a&gt;

    
    &lt;div id=&quot;doi101021acsjctc8b00496-bibtex&quot; class=&quot;collapsible&quot;&gt;
        &lt;pre&gt;@article{doi101021acsjctc8b00496,
  author = {Carpenter, Timothy S. and L\'{o}pez, Cesar A. and Neale, Chris and Montour, Cameron and Ing\'{o}lfsson, Helgi I. and Di Natale, Francesco and Lightstone, Felice C. and Gnanakaran, S.},
  title = {Capturing Phase Behavior of Ternary Lipid Mixtures with a Refined Martini Coarse-Grained Force Field},
  journal = {Journal of Chemical Theory and Computation},
  volume = {14},
  number = {11},
  pages = {6050-6062},
  year = {2018},
  doi = {10.1021/acs.jctc.8b00496},
  note = {PMID: 30253091},
  url = {https://doi.org/10.1021/acs.jctc.8b00496},
  eprint = {https://doi.org/10.1021/acs.jctc.8b00496}
}
&lt;/pre&gt;
    &lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;&lt;/ul&gt;</content><author><name></name></author><category term="python" /><category term="simulations" /><category term="hpc" /><category term="scientific computing" /><category term="software workflow" /><category term="open source" /><summary type="html">A Python command line tool and library for specifying, automating, and monitoring HPC software workflows. *Orchestra your workflows with ease.*</summary></entry></feed>